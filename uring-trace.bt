#!/usr/bin/env bpftrace
/**
 * uring_trace - report io_uring functions get called.
 *
 */

#define IORING_SETUP_IOPOLL     (1U << 0)       /* io_context is polled */
#define IORING_SETUP_SQPOLL     (1U << 1)       /* SQ poll thread */
#define IORING_SETUP_SQ_AFF     (1U << 2)       /* sq_thread_cpu is valid */
#define IORING_SETUP_CQSIZE     (1U << 3)       /* app defines CQ size */
#define IORING_SETUP_CLAMP      (1U << 4)       /* clamp SQ/CQ ring sizes */
#define IORING_SETUP_ATTACH_WQ  (1U << 5)       /* attach to existing wq */
#define IORING_SETUP_R_DISABLED (1U << 6)       /* start with ring disabled */

enum {
  IORING_REGISTER_BUFFERS     = 0,
  IORING_UNREGISTER_BUFFERS   = 1,
  IORING_REGISTER_FILES     = 2,
  IORING_UNREGISTER_FILES     = 3,
  IORING_REGISTER_EVENTFD     = 4,
  IORING_UNREGISTER_EVENTFD   = 5,
  IORING_REGISTER_FILES_UPDATE    = 6,
  IORING_REGISTER_EVENTFD_ASYNC   = 7,
  IORING_REGISTER_PROBE     = 8,
  IORING_REGISTER_PERSONALITY   = 9,
  IORING_UNREGISTER_PERSONALITY   = 10,
  IORING_REGISTER_RESTRICTIONS    = 11,
  IORING_REGISTER_ENABLE_RINGS    = 12,

  /* extended with tagging */
  IORING_REGISTER_FILES2      = 13,
  IORING_REGISTER_FILES_UPDATE2   = 14,
  IORING_REGISTER_BUFFERS2    = 15,
  IORING_REGISTER_BUFFERS_UPDATE    = 16,

  /* set/clear io-wq thread affinities */
  IORING_REGISTER_IOWQ_AFF    = 17,
  IORING_UNREGISTER_IOWQ_AFF    = 18,

  /* set/get max number of io-wq workers */
  IORING_REGISTER_IOWQ_MAX_WORKERS  = 19,

  /* this goes last */
  IORING_REGISTER_LAST
}

struct io_uring_sqe {
        __u8    opcode;         /* type of operation for this sqe */
        __u8    flags;          /* IOSQE_ flags */
        __u16   ioprio;         /* ioprio for the request */
        __s32   fd;             /* file descriptor to do IO on */
        union {
                __u64   off;    /* offset into file */
                __u64   addr2;
        };
        union {
                __u64   addr;   /* pointer to buffer or iovecs */
                __u64   splice_off_in;
        };
        __u32   len;            /* buffer size or number of iovecs */
        union {
                __u32  rw_flags;
                __u32           fsync_flags;
                __u16           poll_events;    /* compatibility */
                __u32           poll32_events;  /* word-reversed for BE */
                __u32           sync_range_flags;
                __u32           msg_flags;
                __u32           timeout_flags;
                __u32           accept_flags;
                __u32           cancel_flags;
                __u32           open_flags;
                __u32           statx_flags;
                __u32           fadvise_advice;
                __u32           splice_flags;
                __u32           rename_flags;
                __u32           unlink_flags;
                __u32           hardlink_flags;
                __u32           xattr_flags;
        };
        __u64   user_data;      /* data to be passed back at completion time */
        /* pack this to avoid bogus arm OABI complaints */
        union {
                /* index into fixed buffers, if used */
                __u16   buf_index;
                /* for grouped buffer selection */
                __u16   buf_group;
        } __attribute__((packed));
        /* personality to use, if used */
        __u16   personality;
        union {
                __s32   splice_fd_in;
                __u32   file_index;
        };
        __u64   addr3;
        __u64   __pad2[1];
}

struct io_rings {
    unsigned int sq_dropped;
    unsigned int cq_overflow;
}

struct io_ring_ctx {
    unsigned int flags;
    struct io_uring_sqe *sq_sqes;
    struct io_rings *rings;
}

BEGIN {
    printf("Tracing io_uring kernel functions... Hit Ctrl-C to end.\n");

    @rw[0] = "READ";
    @rw[1] = "WRITE";

    @register_opcode_names[IORING_REGISTER_BUFFERS]          = "IORING_REGISTER_BUFFERS";
    @register_opcode_names[IORING_UNREGISTER_BUFFERS]        = "IORING_UNREGISTER_BUFFERS";
    @register_opcode_names[IORING_REGISTER_FILES]            = "IORING_REGISTER_FILES";
    @register_opcode_names[IORING_UNREGISTER_FILES]          = "IORING_UNREGISTER_FILES";
    @register_opcode_names[IORING_REGISTER_EVENTFD]          = "IORING_REGISTER_EVENTFD";
    @register_opcode_names[IORING_UNREGISTER_EVENTFD]        = "IORING_UNREGISTER_EVENTFD";
    @register_opcode_names[IORING_REGISTER_FILES_UPDATE]     = "IORING_REGISTER_FILES_UPDATE";
    @register_opcode_names[IORING_REGISTER_EVENTFD_ASYNC]    = "IORING_REGISTER_EVENTFD_ASYNC";
    @register_opcode_names[IORING_REGISTER_PROBE]            = "IORING_REGISTER_PROBE";
    @register_opcode_names[IORING_REGISTER_PERSONALITY]      = "IORING_REGISTER_PERSONALITY";
    @register_opcode_names[IORING_UNREGISTER_PERSONALITY]    = "IORING_UNREGISTER_PERSONALITY";
    @register_opcode_names[IORING_REGISTER_RESTRICTIONS]     = "IORING_REGISTER_RESTRICTIONS";
    @register_opcode_names[IORING_REGISTER_ENABLE_RINGS]     = "IORING_REGISTER_ENABLE_RINGS";
    @register_opcode_names[IORING_REGISTER_FILES2]           = "IORING_REGISTER_FILES2";
    @register_opcode_names[IORING_REGISTER_FILES_UPDATE2]    = "IORING_REGISTER_FILES_UPDATE2";
    @register_opcode_names[IORING_REGISTER_BUFFERS2]         = "IORING_REGISTER_BUFFERS2";
    @register_opcode_names[IORING_REGISTER_BUFFERS_UPDATE]   = "IORING_REGISTER_BUFFERS_UPDATE";
    @register_opcode_names[IORING_REGISTER_IOWQ_AFF]         = "IORING_REGISTER_IOWQ_AFF";
    @register_opcode_names[IORING_UNREGISTER_IOWQ_AFF]       = "IORING_UNREGISTER_IOWQ_AFF";
    @register_opcode_names[IORING_REGISTER_IOWQ_MAX_WORKERS] = "IORING_REGISTER_IOWQ_MAX_WORKERS";

    @opcode_names[0]  = "NOP";
    @opcode_names[1]  = "READV";
    @opcode_names[2]  = "WRITEV";
    @opcode_names[3]  = "FSYNC";
    @opcode_names[4]  = "READ_FIXED";
    @opcode_names[5]  = "WRITE_FIXED";
    @opcode_names[6]  = "POLL_ADD";
    @opcode_names[7]  = "POLL_REMOVE";
    @opcode_names[8]  = "SYNC_FILE_RANGE";
    @opcode_names[9]  = "SENDMSG";
    @opcode_names[10] = "RECVMSG";
    @opcode_names[11] = "TIMEOUT";
    @opcode_names[12] = "TIMEOUT_REMOVE";
    @opcode_names[13] = "ACCEPT";
    @opcode_names[14] = "ASYNC_CANCEL";
    @opcode_names[15] = "LINK_TIMEOUT";
    @opcode_names[16] = "CONNECT";
    @opcode_names[17] = "FALLOCATE";
    @opcode_names[18] = "OPENAT";
    @opcode_names[19] = "CLOSE";
    @opcode_names[20] = "FILES_UPDATE";
    @opcode_names[21] = "STATX";
    @opcode_names[22] = "READ";
    @opcode_names[23] = "WRITE";
    @opcode_names[24] = "FADVISE";
    @opcode_names[25] = "MADVISE";
    @opcode_names[26] = "SEND";
    @opcode_names[27] = "RECV";
    @opcode_names[28] = "OPENAT2";
    @opcode_names[29] = "EPOLL_CTL";
    @opcode_names[30] = "SPLICE";
    @opcode_names[31] = "PROVIDE_BUFFERS";
    @opcode_names[32] = "REMOVE_BUFFERS";
    @opcode_names[33] = "TEE";
    @opcode_names[34] = "SHUTDOWN";
    @opcode_names[35] = "RENAMEAT";
    @opcode_names[36] = "UNLINKAT";
    @opcode_names[37] = "MKDIRAT";
    @opcode_names[38] = "SYMLINKAT";
    @opcode_names[39] = "LINKAT";
    @opcode_names[40] = "FGETXATTR";
    @opcode_names[41] = "FSETXATTR";
    @opcode_names[42] = "GETXATTR";
    @opcode_names[43] = "SETXATTR";
}

tracepoint:io_uring:io_uring_create {
    printf("io_uring_create(sqes = %d, cqes = %d, fd = %d, ring = %p", args->sq_entries, args->cq_entries, args->fd, args->ctx);

    if (args->flags) {
	$first = true;

        printf(", flags =");
        if (args->flags & IORING_SETUP_IOPOLL) {
            printf(" IORING_SETUP_IOPOLL");
	    $first = false
        }
        if (args->flags & IORING_SETUP_SQPOLL) {
            printf("%s IORING_SETUP_SQPOLL", $first ? "" : ",");
	    $first = false
        }
        if (args->flags & IORING_SETUP_SQ_AFF) {
            printf("%s IORING_SETUP_SQ_AFF", $first ? "" : ",");
	    $first = false
        }
        if (args->flags & IORING_SETUP_CQSIZE) {
            printf("%s IORING_SETUP_CQSIZE", $first ? "" : ",");
	    $first = false
        }
        if (args->flags & IORING_SETUP_ATTACH_WQ) {
            printf("%s IORING_SETUP_ATTACH_WQ", $first ? "" : ",");
	    $first = false
        }
        if (args->flags & IORING_SETUP_R_DISABLED) {
            printf("%s IORING_SETUP_R_DISABLED", $first ? "" : ",");
	    $first = false
        }
    }
    printf(")\n")
}

tracepoint:io_uring:io_uring_register {
    printf("io_uring_register(ring = %p, opcode = %s, nr_files = %u, nr_bufs = %u, eventfd = %d, res = %ld)\n",
           args->ctx, @register_opcode_names[args->opcode], args->nr_files, args->nr_bufs, args->eventfd, args->ret);
}

tracepoint:io_uring:io_uring_link {
    printf("io_uring_link(ring = %p, request = %p, linked_after = %p)\n",
           args->ctx, args->req, args->target_req);
}

tracepoint:io_uring:io_uring_fail_link {
    printf("io_uring_fail_link(request = %p, link = %p)\n",
           args->req, args->link);
}

tracepoint:io_uring:io_uring_submit_sqe {
    printf("io_uring_submit_sqe(ring = %p, request = %p, opcode=%s, user_data = %ld, flags = 0x%x, force_nonblock = %d, sq_thread = %d)\n",
           args->ctx, args->req, @opcode_names[args->opcode], args->user_data, args->flags, args->force_nonblock, args->sq_thread);
}

tracepoint:io_uring:io_uring_task_add {
    printf("io_uring_task_add(ring = %p, opcode=%s, user_data = %ld, mask = 0x%x)\n",
           args->ctx, @opcode_names[args->opcode], args->user_data, args->mask);
}

tracepoint:io_uring:io_uring_task_run {
    printf("io_uring_task_run(ring = %p, request = %p, opcode=%s, user_data = %ld)\n",
           args->ctx, args->req, @opcode_names[args->opcode], args->user_data);
}

tracepoint:io_uring:io_uring_queue_async_work {
    printf("io_uring_queue_async_work(ring = %p, mode = %s, request = %p, work_queue = %p, flags = %u)\n",
           args->ctx, @rw[args->rw], args->req, args->work, args->flags);
}

tracepoint:io_uring:io_uring_defer {
    printf("io_uring_defer(ring = %p, request = %p, user_data = %lu)\n",
           args->ctx, args->req, args->data);
}

tracepoint:io_uring:io_uring_cqring_wait {
    printf("io_uring_cqring_wait(ring = %p, min_events = %d)\n",
           args->ctx, args->min_events);
}

tracepoint:io_uring:io_uring_poll_arm {
    printf("io_uring_poll_arm(ring = %p, request = %p, opcode = %s, user_data = %ld, mask = 0x%x, events = %d)\n",
           args->ctx, args->req, @opcode_names[args->opcode], args->user_data, args->mask, args->events);
}

tracepoint:io_uring:io_uring_poll_wake {
    printf("io_uring_poll_wake(ring = %p, opcode = %s, user_data = %ld, mask = 0x%x)\n",
           args->ctx, @opcode_names[args->opcode], args->user_data, args->mask);
}

tracepoint:io_uring:io_uring_complete {
    printf("io_uring_complete(ring = %p, user_data = %ld, flags = %d, res = %d)\n",
           args->ctx, args->user_data, args->cflags, args->res);
}

END {
    clear(@rw);
    clear(@register_opcode_names);
    clear(@opcode_names);
}
